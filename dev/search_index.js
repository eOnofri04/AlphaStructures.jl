var documenterSearchIndex = {"docs":
[{"location":"alpha-structures-impl/#.2-Alpha-Structures-Implementation","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures Implementation","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"As previously said in section 3.3 we have addressed the problem of evaluate alpha-structures via alpha-filtering evaluation (namely the evaluation of the characteristical alpha for each simplex).","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"(Image: alphastructures)","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"Figure 1: 2D Alpha Shape with various alpha","category":"page"},{"location":"alpha-structures-impl/#The-tasks","page":"4.2 - Alpha Structures","title":"The tasks","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"We could decompose the problem into three tasks:","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"evaluate the triangulation decomposition of the Sites S\nevaluate the characteristical alpha\nsort the simplices according to their alpha.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"The first task to solve is to evaluate the Triangulation. However we have discussed this problem in the previous section.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"The last task also is pretty simple and teherefore we will not talk about it in this context.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"The second task is the hardest to achieve. It is pretty clear that each site s in S has a characteristical alpha equal to zero. The real problem occurs then when we want to evaluate the characteristical alpha of all the other simplices.","category":"page"},{"location":"alpha-structures-impl/#Evaluate-Characteristical-\\alpha","page":"4.2 - Alpha Structures","title":"Evaluate Characteristical alpha","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"In order to obtain a simple method to evaluate characteristical alpha so that it is dimensional indipendent we could use the dual of the Delaunay Triangulation we have described in section 3.2: the Voronoy Diagram.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"In fact the following relation occurs:","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"fact: Fact\nA d-dimensional simplex sigma is inside the alpha-complex if and only if and only if the Voronoy regions of the sites of sigma have a common D-d intersection hyperplane included in the alpha-hypersphere of the sites themselves. In other words:    sigma in mathcal A_alpha(S) quad iff quad bigcap_t in sigmaleft(V_t(alpha) cap B_t(alpha)right) ne emptyset","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"To simplify this notion we could refer to what happend in the two dimensional case:","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"example: Example\nLet S in mathbb R^2 then:an edge overlinest occurs in the alpha-complex if and only if the voronoy regions of s and t meet in a common edge that is less far from s and t than alpha;\na triangle stq occurs in the alpha-complex if and only if the voronoy regions of s, t and q meet in a common point that is closer than alpha from the points themselves.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"Of course we could overturn the point of view by looking what happend if we consider the d-1-dimensional ball mathcal B centered in the center of the circumball defined by the d sites of sigma. First of all we are sure it is well defined and unique since S satisfies the general position condition. The stated condition then assume the following form:","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"fact: Fact\nA d-dimensional simplex made of sites Ssubseteq S belongs to the alpha-complex if and only if the ball of radius alpha located in the circumcentre of S intersects the Voronoy boundary hypersurface of the S cells.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"In particular the last statement implies that the characteristical alpha of a simplex sigma is always bigger or equal than the circumradius of the sites it is made of. Moreover for usual conditions (namely no higher dimensional obtuse-solid-angled simplices) the characteristical alpha is precisely that value.","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"This key feature is the one we have used in our implementation. In fact, the problem of determine if a simplex is (or is not) obtuse-angled is pretty simple. It suffices to determine if its circumcentre is (or is not, respectivelly) located outside the simplex itself.","category":"page"},{"location":"alpha-structures-impl/#The-Pipeline","page":"4.2 - Alpha Structures","title":"The Pipeline","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"The approach we have followed could be summed up into the following pipeline:","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"Delaunay triangulation of the Sites S (highest degree simplices)\nConstruction of lower degree simplices via Combinatorics.combinations()\nEvaluation of Circumballs Radius for each simplex\nEvaluation of the Characteristical alpha for each simplex\nSorting the simplices by their alpha in a DataStructures.SortedMultiDict","category":"page"},{"location":"alpha-structures-impl/#Example","page":"4.2 - Alpha Structures","title":"Example","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"julia> using AlphaStructures, ViewerGL\n\njulia> GL = ViewerGL\n\njulia> V = [\n 0.52 0.61 0.71 0.55 0.81 0.20 0.01 0.54 0.54 0.96 0.35 0.42 0.55 0.92 0.41 0.36 0.23 0.35 0.11 0.59\n 0.38 0.47 0.17 0.91 0.62 0.06 0.54 0.20 0.96 0.27 0.07 0.03 0.05 0.57 0.14 0.65 0.05 0.27 0.62 0.53\n];\n\njulia> filtration = AlphaStructures.alphaFilter(V);\nSortedMultiDict(Base.Order.ForwardOrdering(),\n    0.0 => [1], 0.0 => [2], 0.0 => [3]  …\n    0.8948905417047672 => [10, 13], 0.8948905417047672 => [3, 10, 13]\n)\n\njulia> VV,EV,FV = AlphaStructures.alphaSimplex(V,filtration,0.25)\n3-element Array{Array{Array{Int64,1},1},1}:\n [[1], [2], [3]  …  [18], [19], [20]]\n\n [[1, 2], [1, 3], [1, 8]  …  [16, 20], [17, 18], [18, 19]]  \n\n [[1, 2, 3], [1, 2, 20], [1, 3, 8]  …  [11, 17, 18], [12, 13, 15], [16, 18, 19]]\n\njulia> points = [[p] for p in VV];\n\njulia> faces = [[f] for f in FV];\n\njulia> edges = [[e] for e in EV];\n\njulia> GL.VIEW( GL.GLExplode(V, [points; edges; faces], 1.5, 1.5, 1.5, 99, 1) );","category":"page"},{"location":"alpha-structures-impl/#Main-Interface","page":"4.2 - Alpha Structures","title":"Main Interface","text":"","category":"section"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"The solution we have proposed is located in the alphaFilter function (in this file):","category":"page"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"    AlphaStructures.alphaFilter","category":"page"},{"location":"alpha-structures-impl/#AlphaStructures.alphaFilter","page":"4.2 - Alpha Structures","title":"AlphaStructures.alphaFilter","text":"alphaFilter(\n\tV::Matrix, DT = Array{Int64,1}[];\n\tdigits=64\n)::DataStructures.SortedMultiDict{}\n\nReturn ordered collection of pairs (alpha charatteristic, complex).\n\nThis method evaluates the α-filter over the sites S. If a Delaunay Triangulation DT is not specified than it is evaluated via AlphaStructures.delaunayTriangulation().\n\nExamples\n\njulia> V = [1. 2. 1. 2.; 0. 0. 1. 2. ];\n\njulia> AlphaStructures.alphaFilter(V)\nSortedMultiDict(Base.Order.ForwardOrdering(),\n\t0.0 => [1],\n\t0.0 => [2],\n\t0.0 => [3],\n\t0.0 => [4],\n\t0.5 => [1, 2],\n\t0.5 => [1, 3],\n\t0.70710678118655 => [2, 3],\n\t0.70710678118655 => [3, 4],\n\t0.70710678118655 => [1, 2, 3],\n\t1.0 => [2, 4],\n\t1.0 => [2, 3, 4]\n)\n\n\n\n\n\n\n","category":"function"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"    AlphaStructures.alphaSimplex","category":"page"},{"location":"alpha-structures-impl/#AlphaStructures.alphaSimplex","page":"4.2 - Alpha Structures","title":"AlphaStructures.alphaSimplex","text":"alphaSimplex(\n\tV::Matrix,\n\tfiltration::DataStructures.SortedMultiDict{},\n\tα_threshold::Float64\n)::Array{Array{Array{Int64,1},1},1}\n\nReturn collection of all d-simplex, for d ∈ [0,dimension], \twith characteristic α less than a given value α_threshold.\n\n\n\n\n\n","category":"function"},{"location":"alpha-structures-impl/","page":"4.2 - Alpha Structures","title":"4.2 - Alpha Structures","text":"    AlphaStructures.delaunayTriangulation","category":"page"},{"location":"alpha-structures-impl/#AlphaStructures.delaunayTriangulation","page":"4.2 - Alpha Structures","title":"AlphaStructures.delaunayTriangulation","text":"delaunayTriangulation(V::Matrix)::Array{Array{Int64,1},1}\n\nReturn highest level simplices of Delaunay triangulation.\n\nExamples 1D\n\n\njulia> V = [1. 2. 5. 6. 0. 7.];\n\njulia> DT = AlphaStructures.delaunayTriangulation(V)\n5-element Array{Array{Int64,1},1}:\n [1, 5]\n [1, 2]\n [2, 3]\n [3, 4]\n [4, 6]\n\nExamples 2D\n\n\njulia> V = [\n 1. 2. 1. 2. ;\n 0. 0. 1. 2.\n];\n\njulia> DT = AlphaStructures.delaunayTriangulation(V)\n2-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [2, 3, 4]\n\nExamples 3D\n\n\njulia> V = [\n 1. 2. 1. 2. ;\n 0. 0. 1. 2. ;\n 3. 1. 0. 2.\n];\n\njulia> DT = AlphaStructures.delaunayTriangulation(V)\n1-element Array{Array{Int64,1},1}:\n [1, 2, 3, 4]\n\n\n\n\n\n","category":"function"},{"location":"voronoi/#.2-Voronoi-Diagrams","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"","category":"section"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"The second concept we introduce is strictly related to Delaunay Triangulation: Voronoi Diagrams.","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"Voronoi Diagrams (Tassellation, Partition, Decomposition et al.) take its name from its designer, the Russian Mathematician Georgy Feodosevich Voronoi. Particularry in France, Voronoi Diagrams are also known as Dirichlet tessellation (after Johann Peter Gustav Lejeune Dirichlet) or Thiessen polygons.","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"A Voronoi diagram is a partitioning of a space mathbb R^D into regions based on the distance from the sites S in mathbb R^D. For each site there is a corresponding region consisting of all points closer to that site than to any other. These regions are called Voronoi cells.","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"More formally we can define the Voronoi Diagram mathcal V(S) over the set of sites S as the set of the Voronoi cells V_t:","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"\tmathcal V(S) = V_t(S) mid t in S","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"where the Voronoi cells are defined forall t in S as:","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"\tV_t(S) = p in mathbb R^D mid d(t p)  d(u p) forall u in S backslash t","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"Like for the Delaunay Triangulation, also in this case the Tasselation could be defined on whichever metrics. However if different metrics are used, like the 0-norm, something weird could happend.","category":"page"},{"location":"voronoi/#Properties","page":"3.2 - Voronoi Diagrams","title":"Properties","text":"","category":"section"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"The closest pair of sites corresponds to two adjacent cells in the Voronoi diagram.\nAssume the setting is the Euclidean plane and a group of different sites are given. Then two sites are adjacent on the convex hull if and only if their Voronoi cells share an infinitely long side.\nIf the space is a normed space and the distance to each site is attained (e.g., when a site is a compact set or a closed ball), then each Voronoi cell can be represented as a union of line segments emanating from the sites. As shown in [Ree09], this property does not necessarily hold when the distance is not attained.\nUnder relatively general conditions Voronoi cells enjoy a certain stability property: a small change in the shapes of the sites, e.g., a change caused by some translation or distortion, yields a small change in the shape of the Voronoi cells. This is the geometric stability of Voronoi diagrams. As shown in [Ree11], this property does not hold in general, even if the space is two-dimensional (but non-uniformly convex, and, in particular, non-Euclidean) and the sites are points.","category":"page"},{"location":"voronoi/#Voronoi-Diagrams-and-Delaunay-Triangulation","page":"3.2 - Voronoi Diagrams","title":"Voronoi Diagrams and Delaunay Triangulation","text":"","category":"section"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"The Voronoi diagram mathcal V have a particularly strict relation with Delaunay Triangulations mathcal D. In fact, in a sense, mathcal D and mathcal V are one the dual of the other.","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"In fact, if we consider the graph given from separation hypersurfaces edges of V, the Delaunay Triangulation is nothing than the dual graph of it.","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"(Image: dual)","category":"page"},{"location":"voronoi/","page":"3.2 - Voronoi Diagrams","title":"3.2 - Voronoi Diagrams","text":"Figure 1: Duality of Delaunay Triangulation (in black) and Voronoy Diagram (in red).","category":"page"},{"location":"delaunay/#.1-Delaunay-Triangulation","page":"3.1 - Delaunay Triangulation","title":"3.1 -  Delaunay Triangulation","text":"","category":"section"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"The first key concept we introduce is the Delaunay triangulation, a particular simplicial triangulation for a set of Sites S developed by the Russian Mathematician Boris Delaunay in 1934 [Del34]. A Delaunay Triangulation of the sites S mathcal D_S is built such that no point in S is inside the circumball of any simplex in mathcal D. Delaunay Triangulations maximize the minimum angle of all the angles of the triangles in the triangulation in order to try avoiding sliver triangles.","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"A special situation is not defined for Delaunay triangulation: if d+2 or more points lies on the same d-circumball (assuming no other point is inside of it) then the Delaunay triangulation is not unique since more than one complex could be built between them. A simple example is when a 2-dimensional square. Here all the four vertices are on the circumcircle of the square and therefore for each choice of a diagonal we will have a legal Delaunay triangulation.","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"(Image: delaunay)","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"Figure 1: Delaunay Triangulation of the blue sites. In red its corresponding circumcenters.","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"This particular situation led us to consider the set S made of points in a general position.","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"Usually Delaunay triangulation is built over the euclidean metric (also known as 2-norm):","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"\td(P Q) = P-Q_2 = sqrt(sum_i=1^D (Pi - Qi)^2)","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"however it could be obtained using any kind of metrics (The esistence and the uniqueness are not guaranteed).","category":"page"},{"location":"delaunay/#Properties","page":"3.1 - Delaunay Triangulation","title":"Properties","text":"","category":"section"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"Let n = S. We have that the Delaunay Triangulation mathcal D_S has the following properties:","category":"page"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"The union of all simplices in the triangulation is the convex hull of the points.\nThe Delaunay triangulation contains mathcal O(nlceil D  2rceil) simplices. [Rai95]\nIn the plane (D = 2), if there are b vertices on the convex hull, then any triangulation of the points has at most 2n  2  b triangles, plus one exterior face (see Euler characteristic).\nIf points are distributed according to a Poisson process in the plane with constant intensity, then each vertex has on average six surrounding triangles. More generally for the same process in D dimensions the average number of neighbors is a constant depending only on d. [Mei53]\nIn the plane, the Delaunay triangulation maximizes the minimum angle. Compared to any other triangulation of the points, the smallest angle in the Delaunay triangulation is at least as large as the smallest angle in any other. However, the Delaunay triangulation does not necessarily minimize the maximum angle. [ETW92] The Delaunay triangulation also does not necessarily minimize the length of the edges.\nA circle circumscribing any Delaunay triangle does not contain any other input points in its interior.\nIf a circle passing through two of the input points doesn't contain any other of them in its interior, then the segment connecting the two points is an edge of a Delaunay triangulation of the given points.\nEach triangle of the Delaunay triangulation of a set of points in D-dimensional spaces corresponds to a facet of convex hull of the projection of the points onto a (D+1)-dimensional paraboloid, and vice versa.\nThe closest neighbor b to any point p in S is on an edge overlinebp in the Delaunay triangulation since the nearest neighbor graph is a subgraph of the Delaunay triangulation.\nThe Delaunay triangulation is a geometric spanner: In the plane (D = 2), the shortest path between two vertices, along Delaunay edges, is known to be no longer than 4pi3sqrt3approx 2418 times the Euclidean distance between them. [KG92]","category":"page"},{"location":"delaunay/#Other-formulations-of-Delaunay-Triangulation","page":"3.1 - Delaunay Triangulation","title":"Other formulations of Delaunay Triangulation","text":"","category":"section"},{"location":"delaunay/","page":"3.1 - Delaunay Triangulation","title":"3.1 - Delaunay Triangulation","text":"The problem of finding the Delaunay triangulation of a set of points in D-dimensional Euclidean space can be converted to the problem of finding the convex hull of a set of points in (D+1)-dimensional space, by giving each point P an extra coordinate equal to P^2, taking the bottom side of the convex hull, and mapping back to D-dimensional space by deleting the last coordinate. As the convex hull is unique, so is the triangulation, assuming all facets of the convex hull are simplices. Nonsimplicial facets only occur when D + 2 of the original points lie on the same D-hypersphere, i.e., the points are not in general position.","category":"page"},{"location":"theory-index/#.0-Theory-Index","page":"3.0 - Theory Index","title":"3.0 - Theory Index","text":"","category":"section"},{"location":"theory-index/","page":"3.0 - Theory Index","title":"3.0 - Theory Index","text":"This section has the purpose to introduce the theoretical concept behind the code in this module. For this reason we will give a brief overview of:","category":"page"},{"location":"theory-index/","page":"3.0 - Theory Index","title":"3.0 - Theory Index","text":"Delaunay Triangulation in section 3.1\nVoronoy Diagram in section 3.2\nAlpha Structures in section 3.3\nPersistent Homology in section 3.4","category":"page"},{"location":"theory-index/","page":"3.0 - Theory Index","title":"3.0 - Theory Index","text":"In general we will assume S a set of sites (namely points in mathbb R^D D  infty). In the following we assume that S is made of points in a general position (i.e. no d+2 points of S lie on a common ball). Of course this condition is not general (regardless of the name); however there’s a technique called SoS which \"simulates an infinitesimal perturbation of the points\", so that they are in general position afterwards.","category":"page"},{"location":"alpha-structures/#.3-Introduction-to-\\alpha-Structures","page":"3.3 - Alpha Structures","title":"3.3 - Introduction to alpha-Structures","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Let as usual S a set of n sites in mathbb R^D (finite). Since we are interested in real situation we will restrict to the case D in 2 3; however the following description could be simply enlarged for a general D value.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Suppose we want to build is something like \"the shape formed by these points\". Of course it could be done in many ways: alpha-shapes are one of them.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Suppose than that we want to take this alpha-shape and we want to build its complete structure: in other words we want to evaluate each and every d-simplex (with d in 0 D) it could be made of; something like \"the bricks this shape is made of\". This problem also could be solved in many ways: alpha-complexes are one of them.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"As Edelbrunner and Mücke said in their paper [EM92] alpha-shapes could be thinked as the following. Imagine a huge mass of ice-cream making up the space mathbb R^d and containing the points S as \"hard\" chocolate pieces. Using one of these sphere-formed ice-cream spoons we carve out all parts of the ice-cream block we can reach without bumping into chocolate pieces, thereby even carving out holes in the inside (eg. parts not reachable by simply moving the spoon from the outside). We will eventually end up with a (not necessarily convex) object bounded by caps, arcs and points; we will call this object alpha-hull of S. If we now straighten all \"round\" faces to triangles and line segments, we have an intuitive description of what is called the alpha-shape of S, denoted by mathcal T.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"But what is alpha after all? In the ice-cream analogy above, alpha is the squared radius of the carving spoon. A very small value will allow us to eat up all of the ice-cream except the chocolate points themselves. Thus for alpha to 0 the alpha shape degenerates to the sites set S. On the other hand, a huge value of alpha will prevent us even from moving the spoon between two points since it is too large and we will never spoon up the ice-cream lying in the inside of the convex hull of S. Hence, the alpha-shape becomes the convex hull of S as alpha to infty.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"(Image: alpha)","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Figure 1: alpha-structure over Delaunay Triangulation on 2D alpha symbol.","category":"page"},{"location":"alpha-structures/#Geometrical-Concept","page":"3.3 - Alpha Structures","title":"Geometrical Concept","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"We will shortly discuss all the geometrical concepts that are needed to understand what an alpha-structure is.","category":"page"},{"location":"alpha-structures/#\\alpha-hulls-and-\\alpha-diagrams","page":"3.3 - Alpha Structures","title":"alpha-hulls and alpha-diagrams","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"First of all we need to identify what the spoon of the introduction is.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nFor each 0  alpha  infty let an alpha-ball be an open ball with radius alpha. We will identify with B_x(alpha) the alpha-ball centered in x. For completenes we could therefore impose that B_x(0) represents the point x. Now, a certain alpha-ball B (at a given location) is called empty if B cap S = emptyset.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"We can then define what an alpha-hull is, using the previous definition.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nFor each 0  alpha  infty we define the alpha-hull mathcal H_alpha of S as the complement of the union of all empty alpha-balls:    mathcal H_alpha = overline bigcup_x in mathbb R^d D_alpha(x) mid D_alpha(x) cap S = emptyset  ","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"It follows from the previous definition the following three facts:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"if alpha_1 leq alpha_2 then mathcal H_alpha_1 subseteq mathcal H_alpha_2;\nfor alphatoinfty we obtain that mathcal H_alpha corresponds to the convex hull of S;\nmathcal H_0 = S since only the sites are considered.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"One more usefull concept related to what we are introducing is the alpha-diagramm defined as follows","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nFor each 0  alpha  infty we define the alpha-diagram mathcal U_alpha of S as the the union of all the alpha-balls centered in the sites of S:    mathcal U_alpha =  bigcup_s in S D_alpha(s)","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"It is pretty clear that there is a strict relation between mathcal H_alpha and mathcal U_alpha. In fact a point x belongs to mathcal U_alpha if and only if B_x(alpha) cap mathcal H_alpha ne emptyset. Therefore we obtain the following relations","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"\tbeginsplit\n\t\tx in mathcal U_alpha iff B_x(alpha) cap mathcal H_alpha ne emptyset\n\t\tx in mathcal H_alpha iff B_x(alpha) subseteq mathcal U_alpha\n\tendsplit","category":"page"},{"location":"alpha-structures/#\\alpha-Shapes-and-\\alpha-Complexes","page":"3.3 - Alpha Structures","title":"alpha-Shapes and alpha-Complexes","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"We have so far talked about sets. What we are interested in are however complex of simplices. We therefore drop the curved edges of alpha-hulls in favor of straight lines.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"What we have described take the name of alpha-shape of S: we will denote it Sigma_alpha(S) or, shortly, Sigma. In fact it gives us a boundary of what is internal to the point cloud made of the Sites S and what is and outsider. It is trivial to understand that Sigma is mainly made of D-1-simplices and it could not have D-simplices at all.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"However Sigma comes with a notion of Delaunay Triangulation and, since the general position condition is satisfied by hypotesis, it follows that the polytope decomposition of the alpha-hull is unique. We define:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nThe Delaunay Triangulation of Sigma_alpha(S) takes the name of alpha-complex of S: we will denote it mathcal A_alpha(S) or, shortly, mathcal A.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"It then follows from the way we have defined it that if a d-polytope (d-cell) is in mathcal A then every cell it is made of is also inside mathcal A.","category":"page"},{"location":"alpha-structures/#\\alpha-Filtration","page":"3.3 - Alpha Structures","title":"alpha-Filtration","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"(Image: alpha)","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Figure 2: alpha-filtration of a 3D cat shape.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"We now introduce the case of study of what happends if we vary the alpha value. In general this topic is strictly related to Persistent Homology (we will see in the next section).","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"The first observation we could make is that the bigger is the value alpha the more simplices get into the complex mathcal A.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"It is although pretty clear that if a simplex is in mathcal A for a certain alpha than it will be in mathcal A for every alpha geq alpha. It then makes sense to search for the first value alpha such that each single simplex sigma gets inside mathcal A. We will define it as:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nLet mathcal A_infty(S) equiv mathcal D(S) the Delaunay complex of S. For each simplex sigma in mathcal D(S) we define the characteristical alpha of sigma like the infimum alpha such that sigma in mathcal A_alpha(S):    alpha_sigma = inf_alpha geq 0sigma in mathcal A_alpha(S)","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"This last definition gives us a better way to build up the alpha-Complex:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"    mathcal A_alpha = sigma in mathcal D(S) mid alpha_sigma leq alpha","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"It is of particular interest note that the characteristical \\alpha of each simplex is bigger or equal than those of the simplices (of lower degree) it is made of:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"    alpha_sigma geq alpha_sigma quad forall sigma subseteq sigma","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"With this knowledge it is pretty clear that we can sort the simplices via their characteristical alpha like the comes in the alpha-complex. We therefore could define what we call alpha-Filtration:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"definition: Definition\nLet mathcal D the Delaunay triangulation of a set of Sites S. We define an alpha-Filtration of S like the sequence of Complexes that grows accordingly to the alpha value, namely:    emptyset  = K_0 subseteq K_alpha_1 subseteq K_alpha_2 subseteq dots subseteq K_alpha_k  = mathcal D","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"In particular this will be the key we use in our algorithm to evaluate the alpha-structures. We will describe more precisely how to evaluate the characteristical alpha in the \"Alpha Structures Implementation\" section 4.2.","category":"page"},{"location":"alpha-structures/#Other-\\alpha-structures","page":"3.3 - Alpha Structures","title":"Other alpha-structures","text":"","category":"section"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Since we have defined alpha-complexes via Delaunay Triangulation it makes sense think that we could also define them via Regular Triangulation.","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"We can therefore divide alpha-shapes into two families:","category":"page"},{"location":"alpha-structures/","page":"3.3 - Alpha Structures","title":"3.3 - Alpha Structures","text":"Basic alpha-shapes are based on the Delaunay triangulation.\nWeighted alpha-shapes are based on the Regular Triangulation, a Delunay generalization where the euclidean distance is replaced by the power to weighted points.","category":"page"},{"location":"authors/#A-Authors","page":"A - About the Authors","title":"A - Authors","text":"","category":"section"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"This repository was developed by two students at RomaTre universisty.","category":"page"},{"location":"authors/#[Elia-Onofri](https://github.com/eOnofri04)","page":"A - About the Authors","title":"Elia Onofri","text":"","category":"section"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"Applied Mathematics in Computer Security represents my main field of interest. In particular I am mostly interested in Cryptography (from a theoretical point of view) and Cryptanalysis (from a computer science point of view).","category":"page"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"During my education I have also studied many field about Computer Science that vary from the Computability and Complexity Analysis to the most recent logical theories (like lambda-calculus, Linear Logic, . . . ).","category":"page"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"More recently I have broaden my horizons by confront myself with new perspectives of the Applied Mathematics like Graph Theory, Machine Learning, Computational Topology and Big Data Analysis.","category":"page"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"Linkedin\nemail","category":"page"},{"location":"authors/#[Maria-Teresa-Graziano](https://github.com/marteresagh)","page":"A - About the Authors","title":"Maria Teresa Graziano","text":"","category":"section"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"email","category":"page"},{"location":"authors/#Mantainers","page":"A - About the Authors","title":"Mantainers","text":"","category":"section"},{"location":"authors/","page":"A - About the Authors","title":"A - About the Authors","text":"This repository would be maintained by the Computational Visual Design Laboratory (CVDLAB) of Università degli Studi di Roma Tre.","category":"page"},{"location":"gettingStarted/#Installation","page":"2 - Getting Started","title":"2 - Installation","text":"","category":"section"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"If you have not done so already, download and install Julia.","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"To install a Julia package you have to use the package manager Pkg. Enter the Pkg REPL by pressing ] from the Julia REPL and then use the command add.","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"This package is not in a registry, it can be added by instead of the package name giving the URL to the repository to add.","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"pkg> add https://github.com/eOnofri04/AlphaStructures.jl","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"If you want, you can test if everything is working fine by running","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"pkg> test AlphaStructures","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"this will run all the tests written so far and checking all is working properly.","category":"page"},{"location":"gettingStarted/#Plots","page":"2 - Getting Started","title":"Plots","text":"","category":"section"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"If you want to use a Graphic Interface to preview the results you are going to build up, you can also use ViewerGL package developed by CVD-LAB by running","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"pkg> add ViewerGL\nusing ViewerGL","category":"page"},{"location":"gettingStarted/#Missing-nmake-in-Triangle.jl-installation","page":"2 - Getting Started","title":"Missing nmake in Triangle.jl installation","text":"","category":"section"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"On windows you will need Windows SDK. Then you need to start julia in x64 Native Tools Command Prompt for VS 2017 and build the package.","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"pkg> add Triangle\npkg> build Triangle","category":"page"},{"location":"gettingStarted/","page":"2 - Getting Started","title":"2 - Getting Started","text":"Then you can start julia from cmd.","category":"page"},{"location":"persistent-homology-impl/#.3-Persistent-Homology","page":"4.3 - Persistent Homology","title":"4.3 - Persistent Homology","text":"","category":"section"},{"location":"delaunay-impl/#.1-Delaunay-Wall-Triangulation-Algorithm","page":"4.1 - DeWall Algorithm","title":"4.1 - Delaunay Wall Triangulation Algorithm","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"We approached the problem as described in [CMS97] and [CMS98].","category":"page"},{"location":"delaunay-impl/#Advantage","page":"4.1 - DeWall Algorithm","title":"Advantage","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The duality between Delaunay Triangulations and Voronoi diagrams has been discussed in section 3.1 and section 3.2. However, direct construction methods are generally more efficient because the Voronoi diagram does not need to be computed and stored. Various approaches have been historically used:","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"Local improvement: starting with an arbitrary triangulation these algorithms locally modify the faces of pairs of adjacent simplices according to the circumsphere criterion.\nOn line (or incremental insertion): starting with a simplex which contains the convex hull of the point set these algorithms insert the points in P one at a time. The simplex containing the currently added point is partitioned by inserting it as a new vertex. The circumsphere criterion is tested on all the simplices adjacent to the new ones recursively and, if necessary, their faces are flipped.\nIncremental construction: the DT is constructed by successively building simplices whose circumhyperspheres contain no points in P.\nHigher dimensional embedding: these algorithms transform the points into the E^d+1 space and then compute the convex hull of the transformed points the DT is obtained by simply projecting the convex hull into E^d.\nClassic D&C algorithms: this is based on the recursive partition and local triangulation of the point set and then on a merging phase where the resulting triangulations are joined.","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The algorithm we have choosen to encode is one of the latter class. Its peculiarity is that the computational phase is located in the Divide Step (instead of the merge step). Delaunay Wall algorithm first subdivides the input dataset, then builds that part of the DT that should be built in the merge phase of a classic D&C algorithm and then recursively triangulates the two half–spaces, taking into account the border of the previously computed merge triangulation.","category":"page"},{"location":"delaunay-impl/#Delauany-Wall-Pipeline","page":"4.1 - DeWall Algorithm","title":"Delauany Wall Pipeline","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The DeWall (Delaunay Wall) algorithm could be summed up by following pipeline:","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"select a hyperplane alpha that divides the space into two halfspaces\nsplit the sites S into two subset: S^- and S^+ (the points in the negative and positive halfspace)\nconstruct the Wall (Sigma^alpha) of the Delaunay simplices over that intersect the plane alpha\nrecursively apply DeWall on S^- to obtain Sigma^-\nrecursively apply DeWall on S^+ ro obtain Sigma^+\nmerge Sigma^alpha, Sigma^- and Sigma^+.","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"In particular we have that:","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tSigma^alpha = sigma in mathcal D_S mid sigma cap alpha ne emptyset ","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tSigma^- = sigma in mathcal D_S mid sigma in mboxNegHalfspace(alpha)","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tSigma^+ = sigma in mathcal D_S mid sigma in mboxPosHalfspace(alpha)","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"and therefore by construction we have that Sigma^alpha, Sigma^- and Sigma^+ are disjoint and","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tSigma^alpha cup Sigma^- cup Sigma^+ = mathcal D_S","category":"page"},{"location":"delaunay-impl/#Construct-simplex-wall-S\\alpha","page":"4.1 - DeWall Algorithm","title":"Construct simplex wall S^alpha","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The simplex wall Sigma^alpha can be simply computed by using an incremental construction approach.","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"First of all we define three active face lists:","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"AFL^alpha: the (d - 1)-simplices intersecting alpha\nAFL^+: the (d - 1)-simplices totally located in the negative halfspace defined by alpha\nAFL^-: the (d - 1)-simplices totally located in the positive halfspace defined by alpha","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The algorithm starts by constructing an initial d-simplex sigma_0 that intersect the hyperplane (if no active faces are provided). Then, it processes all of the (d - 1)-simplices of σ_0 by splitting them into the Active Face Lists. From now on the AFL^alpha is progressively emptied (and filled) by taking one at time the simplices in it.","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"For each d-1-simplex eta (wich will belongs to a d-simplex sigma^1 in mathcal D_S) the algorithm finds out the only other d-simplex sigma^2 (if it exists) incident on eta: to do so the algorithm looks for the closest point (according to circumradius distance) to the face that do not belongs to the halfspace where the simplex sigma^1 is. Lastly all of the new (d - 1)-simplex of sigma^2 are splitted between the Active Face Lists (do not that in this procedure, if a face is already present in the AFL than it is simply removed since the two simplices incident over it have been found).","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"fact: Fact\nFor each (d - 1)-simplex eta, which does not lie on the convex hull of S, there are exactly two simplices sigma^1 and sigma^2 in mathcal D_S, such that sigma^1 cap sigma^2 = f. If the algorithm is not able to find out a second simplex incident on eta we can therefore claim that that simplex belongs to the convex hull of S.","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"When the process is over, the wall has been built. It remains to use the Active Face Lists of the positive and negative halfspaces.","category":"page"},{"location":"delaunay-impl/#Recursively-call-DeWall","page":"4.1 - DeWall Algorithm","title":"Recursively call DeWall","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The wall building process is then applied again to the two halfspaces defined by alpha by choosing another alpha-hyperplane. However if only the points in the halfspace are given to the new call of the function, a careful look must be given to the new simplex evaluated. In fact it could happen that point that earlier where closer to points in the other halfspace, now are closer to other points in the same halfspace. To avoid this annoying situation (solvable in the merge phase checking if any simplex is intersecting any other) a faster solution is to bring into the recursive step also the points that forms the previous walls and discard the simplices that will be formed with that points (in our code, the blacklist).","category":"page"},{"location":"delaunay-impl/#Merging-the-Delaunay-Triangulations","page":"4.1 - DeWall Algorithm","title":"Merging the Delaunay Triangulations","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"If the trick described in the last paragraph have been applied than no particular operations but the merging must be made at this point. In fact the triangulations will be completely disjoint and their intersection will give us back only AFL^- and AFL^+.","category":"page"},{"location":"delaunay-impl/#Examples","page":"4.1 - DeWall Algorithm","title":"Examples","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The input is a set of points in mathcal R^d, of type Matrix, the output is a set of d-simplices, of type Array{Array{Int64,1},1}. So we can create a LAR model to view.","category":"page"},{"location":"delaunay-impl/#D-Delaunay-triangulation","page":"4.1 - DeWall Algorithm","title":"3D Delaunay triangulation","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"julia> using AlphaStructures, ViewerGL;\n\njulia> GL = ViewerGL;\n\njulia> V = [\n 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0\n 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0\n 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0\n];\n\njulia> DT = AlphaStructures.delaunayWall(V)\n6-element Array{Array{Int64,1},1}:\n [1, 2, 4, 5]\n [1, 3, 4, 5]\n [2, 4, 5, 6]\n [3, 4, 5, 7]\n [4, 5, 6, 7]\n [4, 6, 7, 8]\n\njulia> GL.VIEW([\n\tGL.GLExplode(\n\t\tVS,\n\t\t[[σ] for σ in DT],\n\t\t1.5, 1.5, 1.5,\t# Explode Ratio\n\t\t99, 1\t\t\t# Colors\n\t)\n]);\n","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"(Image: 3Ddelaunay)","category":"page"},{"location":"delaunay-impl/#D-Delaunay-triangulation-2","page":"4.1 - DeWall Algorithm","title":"2D Delaunay triangulation","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\njulia> using AlphaStructures, ViewerGL;\n\njulia> GL = ViewerGL;\n\njulia> V = [\n 0.0 2.0 0.0 4.0 5.0\n 0.0 0.0 3.0 1.0 5.0\n];\n\njulia> DT = AlphaStructures.delaunayWall(V)\n3-element Array{Array{Int64,1},1}:\n [2, 3, 4]\n [3, 4, 5]\n [1, 2, 3]\n\njulia> GL.VIEW([\n\tGL.GLExplode(\n\t\tVS,\n\t\t[[σ] for σ in DT],\n\t\t1., 1.,\t1.\t# Explode Ratio\n\t\t99, 1\t\t# Colors\n\t)\n]);\n","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"(Image: 2Ddelaunay)","category":"page"},{"location":"delaunay-impl/#Main-Interface","page":"4.1 - DeWall Algorithm","title":"Main Interface","text":"","category":"section"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"The solution we have proposed is located in the alphaFilter function (in this file):","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tAlphaStructures.delaunayWall","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tAlphaStructures.findWallSimplex","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"\tAlphaStructures.firstDeWallSimplex","category":"page"},{"location":"delaunay-impl/","page":"4.1 - DeWall Algorithm","title":"4.1 - DeWall Algorithm","text":"    AlphaStructures.recursiveDelaunayWall","category":"page"},{"location":"persistent-homology/#.4-Persistent-Homology","page":"3.4 - Persistent Homology","title":"3.4 - Persistent Homology","text":"","category":"section"},{"location":"this-module/#.0-Module-Introduction","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"","category":"section"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"In this module we have solved the problem of building an alpha-complex for a generic dimension.","category":"page"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"One of the most sensible problem was that no Julia modules exists for d-dimensional Delaunay Triangulation so far. We have tackled this problem and we have solved it in a pretty good way by coding the Delaunay Wall algorithm by P. Cignoni, C. Montani and R. Scopigno. Even though we have preferred to use Triangle.jl by CVD Lab for 2-dimensional planes due to the fact larger test sets have been carried out over that module.","category":"page"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"In section 4.1 we will discuss how we have solved the Delauanay Triangulation problem for a generic d-dimensional space via Delaunay Wall Algorithm","category":"page"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"In section 4.2 we will talk about solving the problem of finding the characteristical alpha of the simplices in order to build the alpha-Structures.","category":"page"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"Lastly, in section 4.3 we will give a brief overview of how we solved the Persistent Homology problem.","category":"page"},{"location":"this-module/","page":"4.0 - Module Introduction","title":"4.0 - Module Introduction","text":"More utility functions could also be found in the src/geometry.jl file.","category":"page"},{"location":"#AlphaStructures.jl","page":"1 - Home","title":"1 - AlphaStructures.jl","text":"","category":"section"},{"location":"","page":"1 - Home","title":"1 - Home","text":"AlphaStructures.jl is a Julia library that provides some tool for point cloud analysis.","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"With AlphaStructures.jl you can:","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"evaluate the alpha-Shape of a point cloud\ncompute the alpha-Filtration of a point cloud\nbuild the alpha-Complex of a point cloud\nfind some basics about Persistent Homology evaluation of a cloud of points","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"In this documentation we present the problem and the related solution we have implemented so far both from the mathematical [EM92] and the computer science [Ede14] point of view.","category":"page"},{"location":"#Dependencies","page":"1 - Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"1 - Home","title":"1 - Home","text":"AlphaStructures.jl has the following dependeces:","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"Combinatorics.jl by Julia Math\nDataStructures.jl by Julia Collections\nLinearAlgebraicRepresentation by CVD Lab\nTriangle.jl by CVD Lab","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"and as additional dependece:","category":"page"},{"location":"","page":"1 - Home","title":"1 - Home","text":"ViewerGL by CVD Lab","category":"page"},{"location":"#Docstrings-conventions","page":"1 - Home","title":"Docstrings conventions","text":"","category":"section"},{"location":"","page":"1 - Home","title":"1 - Home","text":"Bold is used to point out theory concepts.\nMonospace is used for everything code related.","category":"page"},{"location":"bibliography/#B-Bibliography","page":"B - Bibliography","title":"B - Bibliography","text":"","category":"section"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[CMS97] P. Cignoni, C. Montani and R. Scopigno. DeWall: A Fast Divide & Conquer Delaunay Triangulation Algorithm in E^d. C.N.R. Pisa, 1997 http://vcg.isti.cnr.it/publications/papers/dewall.pdf","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[CMS98] P. Cignoni, C. Montani and R. Scopigno. DeWall: A Fast Divide & Conquer Delaunay Triangulation Algorithm in E^d. Computer-Aided Design, Vol. 30, No. 5, pp. 333441, 1998 http://www.personal.psu.edu/faculty/c/x/cxc11/AERSP560/DELAUNEY/8DivideandConquerDeWall.pdf","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[CT98] M. Teichmann and M. Capps. Surface reconstruction with anisotropic density-scaled alpha-shapes. In IEEE Visualization ’98 Proceedings, pages 67–72, San Francisco, CA, October 1998. ACM/SIGGRAPH Press.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Del34] B. Delaunay (1934). \"Sur la sphère vide\". Bulletin de l'Académie des Sciences de l'URSS, Classe des Sciences Mathématiques et Naturelles. 6: 793–800.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Ede92] H. Edelsbrunner. Weighted alpha shapes. Technical Report UIUCDCS-R- 92-1760, Dept. Comput. Sci., Univ. Illinois, Urbana, IL, 1992.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Ede14] Herbert Edelsbrunner. A Short Course in Computational Geometry and Topology. SpringerBriefs in Mathematical Methods, 2014.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[EM90] H. Edelsbrunner and E. P. Mücke. Simulation of simplicity: A technique to cope with degeneratcases in geometric algorithms. ACM Trans. Graph., 9(1):66–104, 1990.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[EM92] H. Edelsbrunner and E. P. Mücke. Three-dimensional alpha shapes. Manuscript UIUCDCS-R-92-1734, Dept. Comput. Sci., Univ. Illinois, Urbana-Champaign, IL, 1992.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[EM94] H. Edelsbrunner and E. P. Mücke. Three-dimensional alpha shapes. ACM Trans. Graph., 13(1):43–72, January 1994.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[ETW92] H. Edelsbrunner, T. S. Tan and R. Waupotitsch (1992), \"An O(n2 log n) time algorithm for the minmax angle triangulation\" (PDF), SIAM Journal on Scientific and Statistical Computing, 13 (4): 994–1008, CiteSeerX 10.1.1.66.2895, doi:10.1137/0913058, MR 1166172, archived (PDF) from the original on 2017-02-09.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[KG92] J. M. Keil and C. A. Gutwin. (1992), \"Classes of graphs which approximate the complete Euclidean graph\", Discrete and Computational Geometry, 7 (1): 13–28, doi:10.1007/BF02187821, MR 1134449.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Mei53] Meijering, J. L. (1953), \"Interface area, edge length, and number of vertices in crystal aggregates with random nucleation\" (PDF), Philips Research Reports, 8: 270–290, archived (PDF) from the original on 2017-03-08. As cited by Dwyer, Rex A. (1991), \"Higher-dimensional Voronoĭ diagrams in linear expected time\", Discrete and Computational Geometry, 6 (4): 343–367, doi:10.1007/BF02574694, MR 1098813.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Rai95] R. Seidel (1995). \"The upper bound theorem for polytopes: an easy proof of its asymptotic version\". Computational Geometry. 5 (2): 115–116. doi:10.1016/0925-7721(95)00013-Y.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Ree09] D. Reem (2009). \"An algorithm for computing Voronoi diagrams of general generators in general normed spaces\". Proceedings of the Sixth International Symposium on Voronoi Diagrams in Science and Engineering (ISVD 2009): 144–152. doi:10.1109/ISVD.2009.23. ISBN 978-1-4244-4769-5.","category":"page"},{"location":"bibliography/","page":"B - Bibliography","title":"B - Bibliography","text":"[Ree11] D. Reem (2011). \"The geometric stability of Voronoi diagrams with respect to small changes of the sites\". Proceedings of the 27th Annual ACM Symposium on Computational Geometry (SoCG): 254–263. arXiv:1103.4125.","category":"page"}]
}
